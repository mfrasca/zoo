\documentclass[article,nojss]{jss}
\DeclareGraphicsExtensions{.pdf,.eps}
%%\newcommand{\mysection}[2]{\subsubsection[#2]{\textbf{#1}}}
\let\mysection=\subsubsection
\renewcommand{\jsssubsubsec}[2][default]{\vskip \preSskip%
  \pdfbookmark[3]{#1}{Subsubsection.\thesubsubsection.#1}%
  \refstepcounter{subsubsection}%
  {\large \textbf{\textit{#2}}} \nopagebreak
  \vskip \postSskip \nopagebreak}

%% need no \usepackage{Sweave}

\author{Gabor Grothendieck\\GKX Associates Inc. \And
        Achim Zeileis\\Wirtschaftsuniversit\"at Wien}
\Plainauthor{Achim Zeileis, Gabor Grothendieck}

\title{\pkg{zoo} FAQ}
\Plaintitle{zoo FAQ}

\Keywords{irregular time series, daily data, weekly data, returns}

\Abstract{
  This is a collection of frequently asked questions (FAQ) about the
  \pkg{zoo} package together with their answers.
}

\Address{
  Gabor Grothendieck\\
  GKX Associates Inc.\\
  E-mail: \email{ggrothendieck@gmail.com}\\
  
  Achim Zeileis\\
  Wirtschaftsuniversit\"at Wien\\
  E-mail: \email{Achim.Zeileis@R-project.org}\\  
}
  
\begin{document}

\SweaveOpts{engine=R,eps=FALSE}
%\VignetteIndexEntry{zoo FAQ}
%\VignetteDepends{zoo,tseries}
%\VignetteKeywords{irregular time series, daily data, weekly data, returns}
%\VignettePackage{zoo}


<<preliminaries, echo=FALSE, results=hide>>=
library("zoo")
@

\mysection[1. I know that duplicate times are not allowed but my data has them. What do I do?]{1. I know that duplicate times are not allowed but my data has them. What do I do?}

\pkg{zoo} objects should not normally contain duplicate times.
If you try to create such an object using
\pkg{zoo} or \code{read.zoo} then warnings will be issued but
the objects will be created.   The user then has the opportunity
to fix them up -- typically by using \code{aggregate.zoo}
or \code{duplicated}.  

Merging is not well defined for duplicate series with duplicate
times and rather than give an undesired or unexpected result,
\code{merge.zoo} issues an error message if it encounters
such illegal objects.   Since \code{merge.zoo}
is the workhorse behind many \pkg{zoo} functions, a significant
portion of \pkg{zoo} will not accept
duplicates among the times.  Typically duplicates are eliminated by
(1)~averaging over them, (2)~taking the last among each run of duplicates
or (3)~interpolating the duplicates and deleting ones on the end that
cannot be interpolated.  These three approaches are shown here
using the \code{aggregate.zoo} function.  Another way to do this
is to use the \code{aggregate} argument of \code{read.zoo} which 
will aggregate the zoo object read in by \code{read.zoo} all in one step.

Note that in the example code below that \code{force} is the identity 
function (i.e. it just returns its argument).  It 
is an \pkg{R} core function:

A \code{"zoo"} series with duplicated indexes
<<duplicates1>>=
z <- suppressWarnings(zoo(1:8, c(1, 2, 2, 2, 3, 4, 5, 5)))
z
@
Fix it up by averaging duplicates:
<<duplicates2>>=
aggregate(z, force, mean)
@
Or, fix it up by taking last in each set of duplicates:
<<duplicates3>>=
aggregate(z, force, tail, 1)
@
Fix it up via interpolation of duplicate times
<<duplicates4>>=
time(z) <- na.approx(ifelse(duplicated(time(z)), NA, time(z)), na.rm = FALSE)
@
If there is a run of equal times at end they
wind up as \code{NA}s and we cannot have \code{NA} times.
<<duplicates5>>=
z[!is.na(time(z))]
@

%% An alternative to aggregating the data is to make the times unique
%% by changing them slightly.  The facilities here are limited to 
%% time classes for
%% which addition by a number makes sense.  See the \code{make.unique.approx}
%% and \code{make.unique.incr} functions which use interpolation or
%% incrementing by a fixed number.  Interpolation has the further restriction
%% that the interpolated result must make sense.  For example, it makes sense to
%% interpolate \code{"POSIXct"} variables but not \code{"Date"} variables since
%% the interpolation may fall between dates.
%% Also see the \code{make.unique}
%% argument to \code{read.zoo} which allows one to read in the data
%% and make it unique all in one operation.  

The \code{read.zoo} command has an \code{aggregate} argument that
supports arbitrary summarization.  For example, in the following
we take the last value among any duplicate times and sum the volumes
among all duplicate times.  We do this by reading the data twice,
once for each aggregate function.  In this example, the first three
columns are junk that we wish to suppress which is why we specified
\code{colClasses}; however, in most cases that argument would not
be necessary.
<<duplicates>>=
Lines <- "1|BHARTIARTL|EQ|18:15:05|600|1
2|BHARTIARTL|EQ|18:15:05|600|99
3|GLENMARK|EQ|18:15:05|238.1|5
4|HINDALCO|EQ|18:15:05|43.75|100
5|BHARTIARTL|EQ|18:15:05|600|1
6|BHEL|EQ|18:15:05|1100|11
7|HINDALCO|EQ|18:15:06|43.2|1
8|CHAMBLFERT|EQ|18:15:06|46|10
9|CHAMBLFERT|EQ|18:15:06|46|90
10|BAJAUTOFIN|EQ|18:15:06|80|100"

library("zoo")
library("chron")

tail1 <- function(x) tail(x, 1)
cls <- c("NULL", "NULL", "NULL", "character", "numeric", "numeric")
nms <- c("", "", "", "time", "value", "volume")

z <- read.zoo(textConnection(Lines), aggregate = tail1,
       FUN = times, sep = "|", colClasses = cls, col.names = nms)

# re-read using sum
z2 <- read.zoo(textConnection(Lines), aggregate = sum,
       FUN = times, sep = "|", colClasses = cls, col.names = nms)

z$volume <- z2$volume
z
@


\mysection[2. When I try to specify a log axis to plot.zoo a warning is issued.  What is wrong?]{2. When I try to specify a log axis to \code{plot.zoo} a warning is issued.  What is wrong?}

Arguments that are part of \code{...} are passed to the \code{panel} 
function and
the default \code{panel} function, \code{lines}, does not accept \code{log}.  
Either 
ignore the warning, use \code{suppressWarnings} 
(see \code{?suppressWarnings}) or create
your own panel function which excludes the \code{log}:

<<log-plot>>=
z <- zoo(1:100)
plot(z, log = "y", panel = function(..., log) lines(...))
@

\mysection[3. How do I create right and a left vertical axes in plot.zoo?]{3. How do I create right and a left vertical axes in \code{plot.zoo}?}

The following shows an example of creating a plot containing a single
panel and both left and right axes.  

<<plot-axes, echo=TRUE, eval=FALSe>>=
set.seed(1)
z.Date <- as.Date(paste(2003, 02, c(1, 3, 7, 9, 14), sep = "-"))
z <- zoo(cbind(left = rnorm(5), right = rnorm(5, sd = 0.2)), z.Date)

plot(z[,1], xlab = "Time", ylab = "")
opar <- par(usr = c(par("usr")[1:2], range(z[,2])))
lines(z[,2], lty = 2)

axis(side = 4)
legend("bottomright", lty = 1:2, legend = colnames(z), bty="n")
par(opar)
@

\begin{figure}[htbp]
\begin{center}
<<plot-axes1, fig=TRUE, height=4.5, width=6, echo=FALSE>>=
<<plot-axes>>
@
\caption{\label{fig:plot-axes} Left and right \code{plot.zoo} axes.}
\end{center}
\end{figure}


\mysection[4. I have data frame with both numeric and factor columns.  How do I convert that to a "zoo" object?]{4. I have data frame with both numeric and factor columns.  How do I convert that to a \code{"zoo"} object?}

A \code{"zoo"} object may be (1) a numeric vector, (2) a numeric matrix or 
(3) a factor but may not contain both a numeric vector and factor.  
You can do one of the following.

Use two \code{"zoo"} variables instead:

<<factor1>>=
DF <- data.frame(time = 1:4, x = 1:4, f = factor(letters[c(1, 1, 2, 2)]))
zx <- zoo(DF$x, DF$time)
zf <- zoo(DF$f, DF$time)
@

These could also be held in a \code{"data.frame"} again:

<<factor2>>=
DF2 <- data.frame(x = zx, f = zf)
@

Or convert the factor to numeric and create a single \code{"zoo"} series:

<<factor3>>=
z <- zoo(data.matrix(DF[-1]), DF$time)
@

\mysection[5. Why does lag give slightly different results on a "zoo" and a "zooreg" series which are otherwise the same?]{5. Why does lag give slightly different results on a \code{"zoo"} and a \code{"zooreg"} series which are otherwise the same?}

To be definite let us consider the following examples, noting how 
both \code{lag} and \code{diff} give a different answer with the same 
input except its class is \code{"zoo"} in one case and \code{"zooreg"} in 
another:

<<lags>>=
z <- zoo(11:15, as.Date("2008-01-01") + c(-4, 1, 2, 3, 6))
zr <- as.zooreg(z)

lag(z)
lag(zr)

diff(log(z))
diff(log(zr))
@

\code{lag.zoo} and \code{lag.zooreg} work differently.  For \code{"zoo"}
objects the lagged version is obtained by moving values 
to the adjacent time point that exists in the series but for \code{"zooreg"} 
objects the time is lagged by \code{deltat}, the time between adjacent
regular times.

A key implication is that \code{"zooreg"} can lag a point to a time point
that did not previously exist in the series and, in particular, can lag
a series outside of the original time range whereas that is not possible
in a \code{"zoo"} series.

Note that \code{lag.zoo} has an \code{na.pad=} argument which in some
cases may be what is being sought here.

The difference between \code{diff.zoo} and \code{diff.zooreg} stems from
the fact that \code{diff(x)} is defined in terms of \code{lag} like
this: \code{x-lag(x,-1)}.

\mysection[6. How do I subtract the mean of each month from a "zoo" series?]{6. How do I subtract the mean of each month from a \code{"zoo"} series?}

Suppose we have a daily series.
To subtract the mean of Jan 2007 from each day in that month,
subtract the mean of Feb 2007 from each day in that month, etc.
try this:
     
<<subtract-monthly-means>>=
set.seed(123)
z <- zoo(rnorm(100), as.Date("2007-01-01") + seq(0, by = 10, length = 100))
z.demean1 <- z - ave(z, as.yearmon(time(z)))
@

This first generates some artificial data and then employs \code{ave} to compute
monthly means.

To subtract the mean of all Januaries from each January, etc.
try this:

<<subtract-monthly-means2>>=
z.demean2 <- z - ave(z, format(time(z), "%m"))
@

\mysection[7. How do I create a monthly series but still keep track of the dates?]{7. How do I create a monthly series but still keep track of the dates?}

Create a \proglang{S}3 subclass of \code{"yearmon"} called \code{"yearmon2"} that 
stores the dates as names on the time vector.  It will be sufficient to create
an \code{as.yearmon2} generic together with an
\code{as.yearmon2.Date} methods as well as the inverse:
\code{as.Date.yearmon2}.

<<yearmon2>>=
# as.yearmon2 generic and as.yearmon2.Date method
as.yearmon2 <- function(x, ...) UseMethod("as.yearmon2")
as.yearmon2.Date <- function(x, ...) {
  y <- as.yearmon(with(as.POSIXlt(x, tz = "GMT"), 1900 + year + mon/12))
  names(y) <- x
  structure(y, class = c("yearmon2", class(y)))
}
@

\code{as.Date.yearmon2} is inverse of \code{as.yearmon2.Date}

<<yearmon2-inverse>>=
as.Date.yearmon2 <- function(x, frac = 0, ...) {
     if (!is.null(names(x))) return(as.Date(names(x)))
     x <- unclass(x)
     year <- floor(x + .001)
     month <- floor(12 * (x - year) + 1 + .5 + .001)
     dd.start <- as.Date(paste(year, month, 1, sep = "-")) 
     dd.end <- dd.start + 32 - as.numeric(format(dd.start + 32, "%d"))
     as.Date((1-frac) * as.numeric(dd.start) + frac * as.numeric(dd.end), origin = "1970-01-01")
}
@

This new class will act the same as \code{"yearmon"} 
stores and allows recovery of the dates using \code{as.Date} and
\code{aggregate.zoo}. 

<<yearmon2-example>>=
dd <- seq(as.Date("2000-01-01"), length = 5, by = 32)
z <- zoo(1:5, as.yearmon2(dd))
z
aggregate(z, as.Date, force) 
@

\mysection[8. How are axes added to a plot created using plot.zoo?]{8. How are axes added to a plot created using \code{plot.zoo}?}

On single panel plots \code{axis} or \code{Axis} can be used just as with any 
classic graphics plot in \proglang{R}.

The following example adds custom axis for single panel plot. 
It labels months but uses the larger year for January.
Months, quarters and years should have successively larger ticks.

<<single-panel>>=
z <- zoo(0:500, as.Date(0:500))
plot(z, xaxt = "n")
tt <- time(z)
m <- unique(as.Date(as.yearmon(tt)))
jan <- format(m, "%m") == "01"
mlab <- substr(months(m[!jan]), 1, 1)
axis(side = 1, at = m[!jan], labels = mlab, tcl = -0.3, cex.axis = 0.7)
axis(side = 1, at = m[jan], labels = format(m[jan], "%y"), tcl = -0.7)
axis(side = 1, at = unique(as.Date(as.yearqtr(tt))), labels = FALSE)

# vertical grid lines
abline(v = m, col = grey(0.8), lty = 2)
@

A multivariate series can either be generated as (1)~multiple single panel
plots:

<<multiplesingleplot>>=
z3 <- cbind(z1 = z, z2 = 2*z, z3 = 3*z)
opar <- par(mfrow = c(2, 2))
tt <- time(z)
m <- unique(as.Date(as.yearmon(tt)))
jan <- format(m, "%m") == "01"
mlab <- substr(months(m[!jan]), 1, 1)
for(i in 1:ncol(z3)) {
    plot(z3[,i], xaxt = "n", ylab = colnames(z3)[i], ylim = range(z3))
    axis(side = 1, at = m[!jan], labels = mlab, tcl = -0.3, cex.axis = 0.7)
    axis(side = 1, at = m[jan], labels = format(m[jan], "%y"), tcl = -0.7)
    axis(side = 1, at = unique(as.Date(as.yearqtr(tt))), labels = FALSE)
}
par(opar)
@

or (2)~as a multipanel plot.  In this case any custom axis must be
placed in a panel function.

<<multipanelplot>>=
plot(z3, screen = 1:3, xaxt = "n", nc = 2, ylim = range(z3),
  panel = function(...) {
   lines(...)
   panel.number <- parent.frame()$panel.number
   nser <- parent.frame()$nser
   # place axis on bottom panel of each column only
   if (panel.number %% 2 == 0 || panel.number == nser) { 
         tt <- list(...)[[1]]
         m <- unique(as.Date(as.yearmon(tt)))
         jan <- format(m, "%m") == "01"
         mlab <- substr(months(m[!jan]), 1, 1)
         axis(side = 1, at = m[!jan], labels = mlab, tcl = -0.3, cex.axis = 0.7)
         axis(side = 1, at = m[jan], labels = format(m[jan], "%y"), tcl = -0.7)
         axis(side = 1, at = unique(as.Date(as.yearqtr(tt))), labels = FALSE)
    }
})
@

\mysection[9. Why is nothing plotted except axes when I plot an object with many NAs?]{9. Why is nothing plotted except axes when I plot an object with many \code{NA}s?}

Isolated points surrounded by \code{NA} values do not form lines:

<<plot-with-na>>=
z <- zoo(c(1, NA, 2, NA, 3))
plot(z)
@

So try one of the following:

Plot points rather than lines.
<<plot-with-na1>>=
plot(z, type = "p") 
@

Omit \code{NA}s and plot that.
<<plot-with-na2>>=
plot(na.omit(z))
@

Fill in the \code{NA}s with interpolated values.
<<plot-with-na3>>=
plot(na.approx(z))
@

Plot points with lines superimposed.
<<plot-with-na4>>=
plot(z, type = "p")
lines(na.omit(z))
@

Note that this is not specific to \pkg{zoo.}  If we
plot in \proglang{R} without \pkg{zoo} we get the same behavior.

\mysection[10. Does zoo work with Rmetrics?]{10. Does \pkg{zoo} work with \pkg{Rmetrics}?}

Yes.  \code{timeDate} class objects from the \pkg{timeDate} package can be used
directly as the index of a \code{zoo} series and \code{as.timeSeries.zoo} and
\code{as.zoo.timeSeries} can convert back and forth between objects of
class \code{zoo} and class \code{timeSeries} from the \pkg{timeSeries} package.

<<Rmetrics>>=
library("timeDate")
dts <- c("1989-09-28", "2001-01-15", "2004-08-30", "1990-02-09")
tms <- c(  "23:12:55",   "10:34:02",   "08:30:00",   "11:18:23")
td <- timeDate(paste(dts, tms), format = "%Y-%m-%d %H:%M:%S")

library("zoo")
z <- zoo(1:4, td)
zz <- merge(z, lag(z))
plot(zz)

library("timeSeries")
zz
as.timeSeries(zz)
as.zoo(as.timeSeries(zz))
@

<<Rmetrics-detach, echo=FALSE, results=hide>>=
detach("package:timeSeries")
detach("package:timeDate")
@

\mysection[11. What other packages use zoo?]{11. What other packages use \pkg{zoo}?}

\begin{tabular}{|l|p{10cm}|} \hline
\multicolumn{2}{|l|}{\emph{Depends}} \\ \hline
\pkg{AER} & Applied econometrics with \proglang{R} \\
\pkg{BootPR} & Bootstrap prediction intervals and bias-corrected forecasting \\
\pkg{dyn} & Time-series regression \\
\pkg{dynlm} & Dynamic linear regression \\
\pkg{fda} & Functional data analysis \\
\pkg{FinTS} & Companion to Tsay's ``Analysis of financial time series'' \\
\pkg{fUtilities} & \pkg{Rmetrics} function utilities \\
\pkg{fxregime} & Exchange rate regime analysis \\
\pkg{lmtest} & Testing linear regression models \\
\pkg{party} & Recursive partytioning toolbox \\
\pkg{PerformanceAnalytics} & Econometric tools for performance and risk analysis \\
\pkg{quantmod} & Quantitative financial modelling framework \\
\pkg{RBloomberg} & \proglang{R}/\pkg{Bloomberg} interface \\
\pkg{sandwich} & Robust covariance matrix estimators \\
\pkg{strucchange} & Testing, monitoring, and dating structural changes \\
\pkg{tis} & Regular time series package, previously part of fame package \\
\pkg{tripEstimation} & Metropolis sampler and supporting functions for
  estimating animal movement from archival tags and satellite fixes \\
\pkg{tseries} & Time series analysis and computational finance \\
\pkg{VhayuR} & R Interface to the Vhayu time series database \\
\pkg{xts} & Extensible time series \\ \hline
\multicolumn{2}{|l|}{\emph{Suggests}} \\ \hline
\pkg{gsubfn} & Utilities for strings and function arguments \\
\pkg{pscl} & Political Science Computational Laboratory, Stanford University \\
\pkg{TSSQLite} & Time series database interface extentions for \pkg{SQLite} \\
\pkg{TSdbi} & Time series database interface \\
\pkg{Zelig} & Everyone's statistical software \\ \hline
\multicolumn{2}{|l|}{\emph{Uses or Used with}} \\ \hline
\pkg{timeDate} & \pkg{Rmetrics} date and time functions: \code{timeDate} usable with \code{zoo} \\ \hline
\pkg{grid} & Graphics infrastructure: use with \code{xyplot.zoo} \\ \hline
\pkg{its} & Irregular time series: \code{as.its.zoo}, \code{as.zoo.its} \\ \hline
\pkg{lattice} & \pkg{grid}-based graphics: use with \code{xyplot.zoo} \\ \hline
\pkg{playwith} & Interactive graphics: works with \code{xylot.zoo} \\ \hline
\pkg{timeSeries} & \pkg{Rmetrics} time series functions: \code{as.timeSeries.zoo}, \code{as.zoo.timeSeries} \\ \hline
\pkg{YaleToolkit} & Data exploration tools from Yale University: accepts \code{"zoo"} input \\ \hline
\end{tabular}

\mysection[12. Why does ifelse not work as I expect?]{Why does \code{ifelse} not work as I expect?}
The ordinary R \code{ifelse} function only works with zoo objects if all three arguments are zoo objects with the same time index.  \pkg{zoo} provides an \code{ifelse.zoo} function that should be used instead.  The \code{.zoo} part must be written out since \code{ifelse} is not generic.

<<ifelse>>=
z <- zoo(c(1, 5, 10, 15))
# wrong !!!
ifelse(diff(z) > 4, -z, z)

# ok
ifelse.zoo(diff(z) > 4, -z, z)

# or if we merge first we can use ordinary ifelse
xm <- merge(z, dif = diff(z))
with(xm, ifelse(dif > 4, -z, z))

# or in this case we could also use orindary ifelse if we 
# use na.pad = TRUE to ensure all three have same index
ifelse(diff(z, na.pad = TRUE) > 4, -z, z)
@

\end{document}
